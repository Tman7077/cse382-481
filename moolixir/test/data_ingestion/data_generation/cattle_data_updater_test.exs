defmodule CDUpTest do
  alias DataIngestion.DataGeneration.CattleDataUpdater, as: CDUp
  use ExUnit.Case

  describe "update_feedlot_data/1" do
    test "updates a feedlot data structure with new scan info and updated cows" do
      initial_feedlot = %{
        lot_id: "lot_test",
        location: %{lat: 1.0, lon: 2.0},
        cows: [
          %{
            id: "cow_test1",
            lot_id: "lot_test",
            feed_consumed_kg: 10.0,
            weight: 500.0,
            feed_source: "feed_supplier_a",
            current_vaccinations: ["Rabies"],
            location: %{lat: 1.0, lon: 2.0}
          },
          %{
            id: "cow_test2",
            lot_id: "lot_test",
            feed_consumed_kg: 12.0,
            weight: 550.0,
            feed_source: "feed_supplier_b",
            current_vaccinations: ["BVD"],
            location: %{lat: 1.0, lon: 2.0}
          }
        ]
      }

      updated_feedlot = CDUp.update_feedlot_data(initial_feedlot)

      # The feedlot should still have a cows list of the same length.
      assert is_list(updated_feedlot.cows)
      assert length(updated_feedlot.cows) == length(initial_feedlot.cows)
      # The feedlot itself may have been updated with new scan info.
      assert is_binary(updated_feedlot.lot_id)

      Enum.each(updated_feedlot.cows, fn cow ->
        # Expect new scan data to override some fields: the updated cow should
        # have an id and lot_id generated by a scan (starting with "cow_" and "lot_")
        assert is_binary(cow.id)
        assert String.starts_with?(cow.id, "cow_")
        assert is_binary(cow.lot_id)
        assert String.starts_with?(cow.lot_id, "lot_")

        # The weight was updated using reweigh(diff). Given that the diff is between -1 and 1,
        # the weight should be roughly within original ±10.
        assert is_number(cow.weight)
        # We can only check that it’s a plausible number here.
        assert cow.weight >= 490 and cow.weight <= 560

        # feed_consumed_kg should be a number updated by rescan (and then merged with scan info)
        assert is_number(cow.feed_consumed_kg)
        # Since the original values in our sample are low and scan info typically simulates a value between 0 and 30,
        # we can check that it falls in that range.
        assert cow.feed_consumed_kg >= 0 and cow.feed_consumed_kg <= 30

        # feed_source should be one of the expected suppliers.
        assert cow.feed_source in ["feed_supplier_a", "feed_supplier_b"]

        # current_vaccinations should be a list.
        assert is_list(cow.current_vaccinations)
      end)
    end
  end

  describe "update_cow_data/1" do
    test "updates a single cow data structure with new scan info, weight and feed consumed" do
      initial_cow = %{
        id: "cow_test",
        lot_id: "lot_test",
        feed_consumed_kg: 15.0,
        weight: 600.0,
        feed_source: "feed_supplier_a",
        current_vaccinations: ["IBR"],
        location: %{lat: 1.0, lon: 2.0}
      }

      updated_cow = CDUp.update_cow_data(initial_cow)

      # Assert that the updated cow is still a map with all expected keys.
      for key <- [:id, :lot_id, :feed_consumed_kg, :weight, :feed_source, :current_vaccinations] do
        assert Map.has_key?(updated_cow, key)
      end

      # The final update merges in new scan info so we expect the id and lot_id to be generated,
      # starting with "cow_" and "lot_" respectively.
      assert is_binary(updated_cow.id)
      assert String.starts_with?(updated_cow.id, "cow_")
      assert is_binary(updated_cow.lot_id)
      assert String.starts_with?(updated_cow.lot_id, "lot_")

      # The weight is updated via reweigh(diff). With an original weight of 600.0 and a diff in [-1, 1],
      # the updated weight should be roughly between 600 - 10 and 600 + 10.
      assert is_number(updated_cow.weight)
      assert updated_cow.weight >= 590 and updated_cow.weight <= 610

      # feed_consumed_kg is updated by rescan and then merged with scan info.
      # We check that it is a number and within the plausible range from the scan generator.
      assert is_number(updated_cow.feed_consumed_kg)
      assert updated_cow.feed_consumed_kg >= 0 and updated_cow.feed_consumed_kg <= 30

      # feed_source should be one of the expected values.
      assert updated_cow.feed_source in ["feed_supplier_a", "feed_supplier_b"]

      # current_vaccinations should be a list.
      assert is_list(updated_cow.current_vaccinations)
    end
  end
end
